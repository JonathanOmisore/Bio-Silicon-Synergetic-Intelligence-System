module top(

       input                      clk,
       input                      rst_n,
       input                      key2,
		 output [3:0]               led,

	   //rtc ds1302 port
       output                     rtc_sclk,
       output                     rtc_ce,
       inout                      rtc_data,
       input                      uart_rx,
       output                     uart_tx,	
       //i2c eeprom port
       input                      key3,
       inout                      i2c_sda,
       inout                      i2c_scl,

       //sd audio port
	    input                      key4,		 
		 output reg [5:0]           seg_sel,
       output reg [7:0]           seg_data,
		 //buzzer port
		 output                     buzzer,		
		 //SD card port
	    output                     SD_nCS,
	    output                     SD_DCLK,
	    output                     SD_MOSI,
	    input                      SD_MISO,                              
	    //ov5640 and sdram port
	    inout                      cmos_scl,          //cmos i2c clock
	    inout                      cmos_sda,          //cmos i2c data
	    input                      cmos_vsync,        //cmos vsync
	    input                      cmos_href,         //cmos hsync refrence,data valid
	    input                      cmos_pclk,         //cmos pxiel clock
	    output                     cmos_xclk,         //cmos externl clock
	    input   [7:0]              cmos_db,           //cmos data 
		 output                     cmos_rst_n,        //cmos reset
	    output                     cmos_pwdn,         //cmos power down
		 output                     vga_out_hs,        //vga horizontal synchronization
	    output                     vga_out_vs,        //vga vertical synchronization
	    output[4:0]                vga_out_r,         //vga red
	    output[5:0]                vga_out_g,         //vga green
	    output[4:0]                vga_out_b,         //vga blue  
	  
       //sdram port
	    output                     sdram_clk,         //sdram clock
	    output                     sdram_cke,         //sdram clock enable
	    output                     sdram_cs_n,        //sdram chip select
	    output                     sdram_we_n,        //sdram write enable
	    output                     sdram_cas_n,       //sdram column address strobe
	    output                     sdram_ras_n,       //sdram row address strobe
	    output  [1:0]              sdram_dqm,         //sdram data enable
	    output  [1:0]              sdram_ba,          //sdram bank address
	    output  [12:0]             sdram_addr,        //sdram address
	    inout   [15:0]             sdram_dq           //sdram data  
	 
);

localparam    idle           = 2'd0 ;
localparam    spiflash_mode  = 2'd1 ;
localparam    eeprom_mode    = 2'd2 ;
localparam    sd_mode        = 2'd3 ;

reg [1:0]       current_state     ;
reg [1:0]       next_state        ;
  
wire            button_negedge2   ;
wire            button_negedge3   ;
wire            button_negedge4   ;
  
reg  [24:0]     blinking_cnt ;

wire [5:0]      rtc_seg_sel ; 
wire [7:0]      rtc_seg_data ; 
wire [5:0]      eeprom_seg_sel ; 
wire [7:0]      eeprom_seg_data ; 
wire [5:0]      sd_seg_sel ; 
wire [7:0]      sd_seg_data ;

reg             sdbmp_rst_n ;
reg             ov_rst_n ;

reg  [3:0]      led_reg           ;

reg             button_negedge4_d0 ;
reg             button_negedge3_d0 ;

wire            sd_card_clk ;

wire            video_clk   ;

wire [15:0]     sdr_dq_in      ;    
wire            sdr_dq_oe      ;
wire  [15:0]    sdr_dq_out     ; 
             
wire            ov_sdram_clk   ;    
wire            ov_sdram_cke   ;    
wire            ov_sdram_cs_n  ;    
wire            ov_sdram_ras_n ;    
wire            ov_sdram_cas_n ;    
wire            ov_sdram_we_n  ;    
wire [1:0]      ov_sdram_dqm   ;    
wire [1:0]      ov_sdram_ba    ;   
wire [12:0]     ov_sdram_addr  ;   
wire            ov_sdr_dq_oe   ;
wire  [15:0]    ov_sdr_dq_out  ;  
wire            ov_vga_out_hs  ;
wire            ov_vga_out_vs  ;
wire [4:0]      ov_vga_out_r   ;
wire [5:0]      ov_vga_out_g   ;
wire [4:0]      ov_vga_out_b   ;

wire            sd_sdram_clk   ;    
wire            sd_sdram_cke   ;    
wire            sd_sdram_cs_n  ;    
wire            sd_sdram_ras_n ;    
wire            sd_sdram_cas_n ;    
wire            sd_sdram_we_n  ;    
wire [1:0]      sd_sdram_dqm   ;    
wire [1:0]      sd_sdram_ba    ;   
wire [12:0]     sd_sdram_addr  ;   
wire            sd_sdr_dq_oe   ;
wire  [15:0]    sd_sdr_dq_out  ;  
wire            sd_vga_out_hs  ;
wire            sd_vga_out_vs  ;
wire [4:0]      sd_vga_out_r   ;
wire [5:0]      sd_vga_out_g   ;
wire [4:0]      sd_vga_out_b   ;                     
                    

assign sdram_clk   = (current_state == sd_mode)? sd_sdram_clk   : ov_sdram_clk     ;                                           
assign sdram_cke   = (current_state == sd_mode)? sd_sdram_cke   : ov_sdram_cke     ;                                           
assign sdram_cs_n  = (current_state == sd_mode)? sd_sdram_cs_n  : ov_sdram_cs_n    ;                                           
assign sdram_ras_n = (current_state == sd_mode)? sd_sdram_ras_n : ov_sdram_ras_n   ;                                           
assign sdram_cas_n = (current_state == sd_mode)? sd_sdram_cas_n : ov_sdram_cas_n   ;                                           
assign sdram_we_n  = (current_state == sd_mode)? sd_sdram_we_n  : ov_sdram_we_n    ;                                           
assign sdram_dqm   = (current_state == sd_mode)? sd_sdram_dqm   : ov_sdram_dqm     ;                                           
assign sdram_ba    = (current_state == sd_mode)? sd_sdram_ba    : ov_sdram_ba      ;                                           
assign sdram_addr  = (current_state == sd_mode)? sd_sdram_addr  : ov_sdram_addr    ; 
assign sdr_dq_oe   = (current_state == sd_mode)? sd_sdr_dq_oe   : ov_sdr_dq_oe     ;                                         
assign sdr_dq_out  = (current_state == sd_mode)? sd_sdr_dq_out  : ov_sdr_dq_out    ;
                     
assign vga_out_hs  = (current_state == sd_mode)? sd_vga_out_hs  : ov_vga_out_hs    ;
assign vga_out_vs  = (current_state == sd_mode)? sd_vga_out_vs  : ov_vga_out_vs    ;
assign vga_out_r   = (current_state == sd_mode)? sd_vga_out_r   : ov_vga_out_r     ;
assign vga_out_g   = (current_state == sd_mode)? sd_vga_out_g   : ov_vga_out_g     ;
assign vga_out_b   = (current_state == sd_mode)? sd_vga_out_b   : ov_vga_out_b     ;


assign sdram_dq = sdr_dq_oe ? sdr_dq_out : {16{1'bz}};
assign sdr_dq_in = sdram_dq ;

assign led = led_reg ;




ax_debounce ax_debounce_a0
(
    .clk             (clk),
    .rst             (~rst_n),
    .button_in       (key2),
    .button_posedge  (),
    .button_negedge  (button_negedge2),
    .button_out      ()
);

ax_debounce ax_debounce_a1
(
    .clk             (clk),
    .rst             (~rst_n),
    .button_in       (key3),
    .button_posedge  (),
    .button_negedge  (button_negedge3),
    .button_out      ()
);

ax_debounce ax_debounce_a2
(
    .clk             (sd_card_clk),
    .rst             (~rst_n),
    .button_in       (key4),
    .button_posedge  (),
    .button_negedge  (button_negedge4),
    .button_out      ()
);

always@(posedge clk or negedge rst_n)
begin
    if(rst_n == 1'b0)
		  current_state  <= idle ;
	 else
	     current_state  <= next_state ;
end
	 

always @(*)
begin
  case(current_state)
    idle           : begin
	                    if (button_negedge2)
			          	    next_state <= spiflash_mode ;
			          	  else if (button_negedge3)
			          	    next_state <= eeprom_mode ;
			          	  else if (button_negedge4)
			          	    next_state <= sd_mode ;
			          	  else
			          	    next_state <= idle ;
			          	 end
	 spiflash_mode  :  begin
			          	  if (button_negedge3)
			          	    next_state <= eeprom_mode ;
			          	  else if (button_negedge4)
			          	    next_state <= sd_mode ;
			          	  else
			          	    next_state <= spiflash_mode ;
			          	 end
	 eeprom_mode    :  begin
	                    if (button_negedge2)
			          	    next_state <= spiflash_mode ;
			          	  else if (button_negedge4)
			          	    next_state <= sd_mode ;
			          	  else
			          	    next_state <= eeprom_mode ;
			          	 end	
	 sd_mode       : begin
	                    if (button_negedge2)
			          	    next_state <= spiflash_mode ;
			          	  else if (button_negedge3)
			          	    next_state <= eeprom_mode ;
							  else
							    next_state <= sd_mode ;
			          	 end	
				 
	 default        :  next_state <= idle ;
	endcase
end


always @(posedge clk or negedge rst_n)
begin
  if(rst_n == 1'b0)
    led_reg <= 4'b0000 ;
  else if (current_state == spiflash_mode)
    led_reg <= {4{blinking_cnt[24]}} ;
  else if (current_state == eeprom_mode)
    led_reg <= {3'b000, blinking_cnt[24]} ;
  else if (current_state == sd_mode)
    led_reg <= {2'b00,blinking_cnt[24],blinking_cnt[24]} ;
  else
    led_reg <= {4{blinking_cnt[22]}} ;
end
    		
			
			
always @(posedge clk or negedge rst_n)
begin
  if(rst_n == 1'b0)
    blinking_cnt <= 0 ;
  else
    blinking_cnt <= blinking_cnt + 1 ;
end	

always @(posedge clk or negedge rst_n)
begin
  if(rst_n == 1'b0)
  begin
    button_negedge4_d0 <= 1'b1 ;
	 button_negedge3_d0 <= 1'b1 ;
  end  
  else
  begin
    button_negedge4_d0 <= button_negedge4 ;
	 button_negedge3_d0 <= button_negedge3 ;
  end  
end	

 

always @(posedge clk or negedge rst_n)
begin
  if(rst_n == 1'b0)
  begin
    seg_sel  <= rtc_seg_sel ;
	 seg_data <= rtc_seg_data ;
  end
  else if (current_state == eeprom_mode)
  begin
    seg_sel  <= eeprom_seg_sel ;
	 seg_data <= eeprom_seg_data ;
  end
  else if (current_state == sd_mode)
  begin
    seg_sel  <= sd_seg_sel ;
	 seg_data <= sd_seg_data ;
  end
  else
  begin
    seg_sel  <= rtc_seg_sel ;
	 seg_data <= rtc_seg_data ;
  end
end


always @(posedge clk or negedge rst_n)
begin
  if(rst_n == 1'b0)
    sdbmp_rst_n <= 1'b0 ;
  else if (current_state == sd_mode)
    sdbmp_rst_n <= 1'b1 ;
  else
    sdbmp_rst_n <= 1'b0 ;
end	

always @(posedge clk or negedge rst_n)
begin
  if(rst_n == 1'b0)
    ov_rst_n <= 1'b0 ;
  else if (current_state == sd_mode)
    ov_rst_n <= 1'b0 ;
  else
    ov_rst_n <= 1'b1 ;
end

		   
			   
ds1302_top ds1302_dut
(
    .clk                 (clk),   
    .rst_n               (rst_n),
    .rtc_sclk            (rtc_sclk),
    .rtc_ce              (rtc_ce),
    .rtc_data            (rtc_data),
    .seg_sel             (rtc_seg_sel),
    .seg_data            (rtc_seg_data)	
);
	
i2c_eeprom_test eeprom_dut
(
    .clk                 (clk),   
    .rst_n               (rst_n),
    .button_negedge      (button_negedge3_d0),
    .i2c_sda             (i2c_sda),
    .i2c_scl             (i2c_scl),
    .seg_sel             (eeprom_seg_sel),
    .seg_data            (eeprom_seg_data)
);

uart_test uart0(
	.clk                  (clk),   
   .rst_n                (rst_n),
	.uart_rx              (uart_rx),
	.uart_tx              (uart_tx)
); 

music_top music
(
 .clk                    (clk),   
 .rst_n                  (rst_n),
 .buzzer                 (buzzer )
) ;




//generate video pixel clock	
video_pll video_pll_m0(
	.inclk0                     (clk),
	.c0                         (video_clk)
	);

sdbmp_top sdbmp_dut
(
	.clk                  (clk               ),   
   .rst_n                (sdbmp_rst_n       ),
   .button_negedge       (button_negedge4   ), 
	.seg_sel              (sd_seg_sel       ),
   .seg_data             (sd_seg_data      ), 
	.vga_out_hs           (sd_vga_out_hs    ),
	.vga_out_vs           (sd_vga_out_vs    ),
	.vga_out_r            (sd_vga_out_r     ),
	.vga_out_g            (sd_vga_out_g     ),
	.vga_out_b            (sd_vga_out_b     ),
	.sd_ncs              (SD_nCS        ),
	.sd_dclk             (SD_DCLK       ),
	.sd_mosi             (SD_MOSI       ),
	.sd_miso             (SD_MISO       ),	
	

	.sd_card_clk          (sd_card_clk      ),
	.video_clk            (video_clk        ),

	.sdram_clk            (sd_sdram_clk     ),         
	.sdram_cke            (sd_sdram_cke     ),
	.sdram_cs_n           (sd_sdram_cs_n    ),
	.sdram_ras_n          (sd_sdram_ras_n   ),
	.sdram_cas_n          (sd_sdram_cas_n   ),
	.sdram_we_n           (sd_sdram_we_n    ),
	.sdram_dqm            (sd_sdram_dqm     ),
	.sdram_ba             (sd_sdram_ba      ),
	.sdram_addr           (sd_sdram_addr    ),
	.sdr_dq_oe            (sd_sdr_dq_oe     ),
	.sdr_dq_out           (sd_sdr_dq_out    ),
	.sdram_dq             (sdram_dq         )
);	

ov5640_top ov5640_dut
(
	.clk                  (clk           ),   
   .rst_n                (ov_rst_n        ),
	.cmos_scl             (cmos_scl      ),          //cmos i2c clock
	.cmos_sda             (cmos_sda      ),          //cmos i2c data
	.cmos_vsync           (cmos_vsync    ),        //cmos vsync
	.cmos_href            (cmos_href     ),         //cmos hsync refrence,data valid
	.cmos_pclk            (cmos_pclk     ),         //cmos pxiel clock
	.cmos_xclk            (cmos_xclk     ),         //cmos externl clock
	.cmos_db              (cmos_db       ),           //cmos data
	.cmos_rst_n           (cmos_rst_n    ),        //cmos reset
	.cmos_pwdn            (cmos_pwdn     ),         //cmos power down	

	.video_clk            (video_clk        ),
	 
	.vga_out_hs           (ov_vga_out_hs    ),
	.vga_out_vs           (ov_vga_out_vs    ),
	.vga_out_r            (ov_vga_out_r     ),
	.vga_out_g            (ov_vga_out_g     ),
	.vga_out_b            (ov_vga_out_b     ),
 
	.sdram_clk            (ov_sdram_clk     ),         
	.sdram_cke            (ov_sdram_cke     ),
	.sdram_cs_n           (ov_sdram_cs_n    ),
	.sdram_ras_n          (ov_sdram_ras_n   ),
	.sdram_cas_n          (ov_sdram_cas_n   ),
	.sdram_we_n           (ov_sdram_we_n    ),
	.sdram_dqm            (ov_sdram_dqm     ),
	.sdram_ba             (ov_sdram_ba      ),
	.sdram_addr           (ov_sdram_addr    ),
	.sdr_dq_oe            (ov_sdr_dq_oe     ),
	.sdr_dq_out           (ov_sdr_dq_out    ),
	.sdram_dq             (sdram_dq         )
);		




endmodule

		